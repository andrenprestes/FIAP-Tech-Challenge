#!/bin/bash

# Script de Deploy - Decision ML
# ==============================

set -e  # Parar em caso de erro

echo "üöÄ INICIANDO DEPLOY DA DECISION ML API"
echo "======================================"

# Cores para output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    log_error "Docker n√£o est√° instalado!"
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n√£o est√° instalado!"
    exit 1
fi

# Criar diret√≥rio de logs
log_info "Criando diret√≥rio de logs..."
mkdir -p logs
log_success "Diret√≥rio de logs criado"

# Parar containers existentes
log_info "Parando containers existentes..."
docker-compose down --remove-orphans || true
log_success "Containers parados"

# Limpar imagens antigas (opcional)
if [ "$1" = "--clean" ]; then
    log_info "Limpando imagens antigas..."
    docker system prune -f
    log_success "Limpeza conclu√≠da"
fi

# Build da aplica√ß√£o
log_info "Construindo imagem da aplica√ß√£o..."
docker-compose build decision-ml-api
log_success "Imagem constru√≠da com sucesso"

# Iniciar servi√ßos
log_info "Iniciando servi√ßos..."
docker-compose up -d

# Aguardar inicializa√ß√£o
log_info "Aguardando inicializa√ß√£o dos servi√ßos..."
sleep 30

# Verificar status dos containers
log_info "Verificando status dos containers..."
docker-compose ps

# Testar API
log_info "Testando API..."
max_attempts=10
attempt=1

while [ $attempt -le $max_attempts ]; do
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        log_success "API est√° respondendo!"
        break
    else
        log_warning "Tentativa $attempt/$max_attempts - API ainda n√£o est√° pronta"
        sleep 5
        ((attempt++))
    fi
done

if [ $attempt -gt $max_attempts ]; then
    log_error "API n√£o respondeu ap√≥s $max_attempts tentativas"
    log_info "Verificando logs da API..."
    docker-compose logs decision-ml-api
    exit 1
fi

# Executar testes b√°sicos
log_info "Executando testes b√°sicos..."

# Teste 1: Health check
if curl -s http://localhost:8000/health | grep -q "healthy"; then
    log_success "Health check passou"
else
    log_error "Health check falhou"
fi

# Teste 2: Model info
if curl -s http://localhost:8000/model-info | grep -q "DBSCAN"; then
    log_success "Model info passou"
else
    log_error "Model info falhou"
fi

# Teste 3: Predi√ß√£o simples
test_data='{
    "ano_candidatura": 2024,
    "mes_candidatura": 7,
    "dia_semana": 2,
    "trimestre": 3,
    "taxa_sucesso_recrutador": 0.35,
    "volume_recrutador": 50,
    "taxa_sucesso_modalidade": 0.08,
    "posicao_funil": 2,
    "modalidade_encoded": 1,
    "recrutador_clean_encoded": 5
}'

if curl -s -X POST -H "Content-Type: application/json" -d "$test_data" http://localhost:8000/predict | grep -q "cluster_id"; then
    log_success "Teste de predi√ß√£o passou"
else
    log_error "Teste de predi√ß√£o falhou"
fi

# Mostrar informa√ß√µes de acesso
echo ""
echo "======================================"
log_success "DEPLOY CONCLU√çDO COM SUCESSO!"
echo "======================================"
echo ""
echo "üåê Servi√ßos dispon√≠veis:"
echo "   ‚Ä¢ API Principal: http://localhost:8000"
echo "   ‚Ä¢ Documenta√ß√£o: http://localhost:8000/docs"
echo "   ‚Ä¢ Health Check: http://localhost:8000/health"
echo "   ‚Ä¢ MLflow UI: http://localhost:5000"
echo "   ‚Ä¢ Nginx (Proxy): http://localhost:80"
echo "   ‚Ä¢ Prometheus: http://localhost:9090"
echo "   ‚Ä¢ Grafana: http://localhost:3000 (admin/admin)"
echo ""
echo "üìã Comandos √∫teis:"
echo "   ‚Ä¢ Ver logs: docker-compose logs -f [service]"
echo "   ‚Ä¢ Parar: docker-compose down"
echo "   ‚Ä¢ Reiniciar: docker-compose restart [service]"
echo "   ‚Ä¢ Status: docker-compose ps"
echo ""
echo "üîß Para monitoramento:"
echo "   ‚Ä¢ Logs da API: docker-compose logs -f decision-ml-api"
echo "   ‚Ä¢ M√©tricas: http://localhost:9090"
echo "   ‚Ä¢ Dashboards: http://localhost:3000"
echo ""

# Mostrar logs recentes da API
log_info "Logs recentes da API:"
docker-compose logs --tail=20 decision-ml-api

echo ""
log_success "Deploy finalizado! üéâ"

